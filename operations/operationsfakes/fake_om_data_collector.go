// Code generated by counterfeiter. DO NOT EDIT.
package operationsfakes

import (
	"sync"

	"github.com/pivotal-cf/aqueduct-courier/opsmanager"
)

type FakeOmDataCollector struct {
	CollectStub        func() ([]opsmanager.Data, string, error)
	collectMutex       sync.RWMutex
	collectArgsForCall []struct {
	}
	collectReturns struct {
		result1 []opsmanager.Data
		result2 string
		result3 error
	}
	collectReturnsOnCall map[int]struct {
		result1 []opsmanager.Data
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOmDataCollector) Collect() ([]opsmanager.Data, string, error) {
	fake.collectMutex.Lock()
	ret, specificReturn := fake.collectReturnsOnCall[len(fake.collectArgsForCall)]
	fake.collectArgsForCall = append(fake.collectArgsForCall, struct {
	}{})
	stub := fake.CollectStub
	fakeReturns := fake.collectReturns
	fake.recordInvocation("Collect", []interface{}{})
	fake.collectMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeOmDataCollector) CollectCallCount() int {
	fake.collectMutex.RLock()
	defer fake.collectMutex.RUnlock()
	return len(fake.collectArgsForCall)
}

func (fake *FakeOmDataCollector) CollectCalls(stub func() ([]opsmanager.Data, string, error)) {
	fake.collectMutex.Lock()
	defer fake.collectMutex.Unlock()
	fake.CollectStub = stub
}

func (fake *FakeOmDataCollector) CollectReturns(result1 []opsmanager.Data, result2 string, result3 error) {
	fake.collectMutex.Lock()
	defer fake.collectMutex.Unlock()
	fake.CollectStub = nil
	fake.collectReturns = struct {
		result1 []opsmanager.Data
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeOmDataCollector) CollectReturnsOnCall(i int, result1 []opsmanager.Data, result2 string, result3 error) {
	fake.collectMutex.Lock()
	defer fake.collectMutex.Unlock()
	fake.CollectStub = nil
	if fake.collectReturnsOnCall == nil {
		fake.collectReturnsOnCall = make(map[int]struct {
			result1 []opsmanager.Data
			result2 string
			result3 error
		})
	}
	fake.collectReturnsOnCall[i] = struct {
		result1 []opsmanager.Data
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeOmDataCollector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.collectMutex.RLock()
	defer fake.collectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOmDataCollector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
