// Code generated by counterfeiter. DO NOT EDIT.
package operationsfakes

import (
	"sync"

	"github.com/gofrs/uuid"
)

type FakeUuidProvider struct {
	NewV4Stub        func() (uuid.UUID, error)
	newV4Mutex       sync.RWMutex
	newV4ArgsForCall []struct {
	}
	newV4Returns struct {
		result1 uuid.UUID
		result2 error
	}
	newV4ReturnsOnCall map[int]struct {
		result1 uuid.UUID
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUuidProvider) NewV4() (uuid.UUID, error) {
	fake.newV4Mutex.Lock()
	ret, specificReturn := fake.newV4ReturnsOnCall[len(fake.newV4ArgsForCall)]
	fake.newV4ArgsForCall = append(fake.newV4ArgsForCall, struct {
	}{})
	stub := fake.NewV4Stub
	fakeReturns := fake.newV4Returns
	fake.recordInvocation("NewV4", []interface{}{})
	fake.newV4Mutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUuidProvider) NewV4CallCount() int {
	fake.newV4Mutex.RLock()
	defer fake.newV4Mutex.RUnlock()
	return len(fake.newV4ArgsForCall)
}

func (fake *FakeUuidProvider) NewV4Calls(stub func() (uuid.UUID, error)) {
	fake.newV4Mutex.Lock()
	defer fake.newV4Mutex.Unlock()
	fake.NewV4Stub = stub
}

func (fake *FakeUuidProvider) NewV4Returns(result1 uuid.UUID, result2 error) {
	fake.newV4Mutex.Lock()
	defer fake.newV4Mutex.Unlock()
	fake.NewV4Stub = nil
	fake.newV4Returns = struct {
		result1 uuid.UUID
		result2 error
	}{result1, result2}
}

func (fake *FakeUuidProvider) NewV4ReturnsOnCall(i int, result1 uuid.UUID, result2 error) {
	fake.newV4Mutex.Lock()
	defer fake.newV4Mutex.Unlock()
	fake.NewV4Stub = nil
	if fake.newV4ReturnsOnCall == nil {
		fake.newV4ReturnsOnCall = make(map[int]struct {
			result1 uuid.UUID
			result2 error
		})
	}
	fake.newV4ReturnsOnCall[i] = struct {
		result1 uuid.UUID
		result2 error
	}{result1, result2}
}

func (fake *FakeUuidProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newV4Mutex.RLock()
	defer fake.newV4Mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUuidProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
