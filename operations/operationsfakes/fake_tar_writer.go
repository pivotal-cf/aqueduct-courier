// Code generated by counterfeiter. DO NOT EDIT.
package operationsfakes

import (
	"sync"
)

type FakeTarWriter struct {
	AddFileStub        func([]byte, string) error
	addFileMutex       sync.RWMutex
	addFileArgsForCall []struct {
		arg1 []byte
		arg2 string
	}
	addFileReturns struct {
		result1 error
	}
	addFileReturnsOnCall map[int]struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTarWriter) AddFile(arg1 []byte, arg2 string) error {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.addFileMutex.Lock()
	ret, specificReturn := fake.addFileReturnsOnCall[len(fake.addFileArgsForCall)]
	fake.addFileArgsForCall = append(fake.addFileArgsForCall, struct {
		arg1 []byte
		arg2 string
	}{arg1Copy, arg2})
	stub := fake.AddFileStub
	fakeReturns := fake.addFileReturns
	fake.recordInvocation("AddFile", []interface{}{arg1Copy, arg2})
	fake.addFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTarWriter) AddFileCallCount() int {
	fake.addFileMutex.RLock()
	defer fake.addFileMutex.RUnlock()
	return len(fake.addFileArgsForCall)
}

func (fake *FakeTarWriter) AddFileCalls(stub func([]byte, string) error) {
	fake.addFileMutex.Lock()
	defer fake.addFileMutex.Unlock()
	fake.AddFileStub = stub
}

func (fake *FakeTarWriter) AddFileArgsForCall(i int) ([]byte, string) {
	fake.addFileMutex.RLock()
	defer fake.addFileMutex.RUnlock()
	argsForCall := fake.addFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTarWriter) AddFileReturns(result1 error) {
	fake.addFileMutex.Lock()
	defer fake.addFileMutex.Unlock()
	fake.AddFileStub = nil
	fake.addFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTarWriter) AddFileReturnsOnCall(i int, result1 error) {
	fake.addFileMutex.Lock()
	defer fake.addFileMutex.Unlock()
	fake.AddFileStub = nil
	if fake.addFileReturnsOnCall == nil {
		fake.addFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTarWriter) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTarWriter) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeTarWriter) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeTarWriter) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTarWriter) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTarWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addFileMutex.RLock()
	defer fake.addFileMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTarWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
