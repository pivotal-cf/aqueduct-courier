resource_types:
- name: gcs-resource
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/frodenas/gcs-resource
    tag: 'v0.6.0'
- name: pivnet
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/pivotalcf/pivnet-resource
    tag: latest-final
- name: slack-notification
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cfcommunity/slack-notification-resource
    tag: latest

resources:
- name: platform-automation-image
  type: pivnet
  source:
    api_token: ((pivnet.api-token))
    product_slug: platform-automation
- name: pivotal-telemetry-collector
  type: pivnet
  source:
    api_token: ((pivnet.api-token))
    product_slug: pivotal-telemetry-collector
    copy_metadata: true
- name: telemetry-utils
  type: git
  source:
    branch: main
    uri: git@github.com:pivotal-cf/telemetry-utils
    private_key: ((github.utils-git-deploy-private-key))
- name: aqueduct-courier
  type: git
  source:
    branch: ((version))
    uri: git@github.com:pivotal-cf/aqueduct-courier
    private_key: ((github.courier-git-deploy-private-key))
    ignore_paths: [ci]
- name: ci
  type: git
  source:
    uri: git@github.com:pivotal-cf/aqueduct-courier
    private_key: ((github.courier-git-deploy-private-key))
    paths: [ci]
- name: staging-binaries
  type: gcs-resource
  source:
    bucket: ((aqueduct-courier-repo.courier-staging-builds-bucket))
    json_key: ((service-accounts/gcp.ci-759-gcp-service-account-key))
    regexp: aqueduct-cli-(.*).tgz
- name: staging-linux-binary
  type: gcs-resource
  source:
    bucket: ((aqueduct-courier-repo.courier-staging-builds-bucket))
    json_key: ((service-accounts/gcp.ci-759-gcp-service-account-key))
    versioned_file: telemetry-collector-linux-amd64
- name: staging-windows-binary
  type: gcs-resource
  source:
    bucket: ((aqueduct-courier-repo.courier-staging-builds-bucket))
    json_key: ((service-accounts/gcp.ci-759-gcp-service-account-key))
    versioned_file: telemetry-collector-windows-amd64.exe
- name: production-binaries
  type: gcs-resource
  source:
    bucket: ((aqueduct-courier-repo.courier-production-builds-bucket))
    json_key: ((service-accounts/gcp.ci-759-gcp-service-account-key))
    regexp: aqueduct-cli-(.*).tgz
- name: production-linux-binary
  type: gcs-resource
  source:
    bucket: ((aqueduct-courier-repo.courier-production-builds-bucket))
    json_key: ((service-accounts/gcp.ci-759-gcp-service-account-key))
    versioned_file: telemetry-collector-linux-amd64
- name: version
  type: semver
  source:
    driver: git
    uri: git@github.com:pivotal-cf/aqueduct-courier
    branch: ((version))
    file: ci/VERSION
    private_key: ((github.courier-git-deploy-private-key))
- name: collection-timer
  type: time
  source:
    interval: 1h
- name: prod-collection-timer
  type: time
  source:
    interval: 10m
- name: prod-slack-notification
  type: slack-notification
  source:
    url: ((slack.webhook-url))

jobs:
- name: update-telemetry-utils
  plan:
  - in_parallel:
    - get: ci
    - get: aqueduct-courier
    - get: telemetry-utils
      trigger: true
  - task: update-utils
    file: ci/ci/tasks/update-utils.yml
    params:
      GITHUB_NAME: ((github.github-email))
      GITHUB_EMAIL: ((github.github-name))
      GITHUB_ACCESS_TOKEN: ((github.github-access-token))
  - put: aqueduct-courier
    params:
      repository: aqueduct-courier
      rebase: true

- name: courier-tests
  serial_groups: [courier-tests]
  plan:
  - get: aqueduct-courier
    trigger: true
  - get: ci
  - task: run-tests
    file: ci/ci/tasks/courier-tests.yml

- name: build-staging-binaries
  serial_groups: [version]
  plan:
  - in_parallel:
    - get: aqueduct-courier
      passed: [courier-tests]
      trigger: true
    - get: version
      params: {pre: build}
    - get: ci
  - task: build-binaries
    file: ci/ci/tasks/build-binaries.yml
    params:
      DATA_LOADER_URL: ((aqueduct-courier-repo.staging-data-loader-url))
  - put: staging-binaries
    params:
      file: binary-tar/aqueduct-cli-*.tgz
  - put: staging-linux-binary
    params:
      file: binaries/*linux*
  - put: staging-windows-binary
    params:
      file: binaries/*windows*
  - put: version
    params: {file: version/version}

- name: test-collect-credhub-info
  plan:
  - in_parallel:
    - get: version
      passed: [build-staging-binaries]
    - get: aqueduct-courier
      passed: [build-staging-binaries]
      trigger: true
    - get: staging-linux-binary
      passed: [build-staging-binaries]
    - get: ci
  - task: collect-credhub-info
    file: ci/ci/tasks/collect-with-credhub-info.yml
    input_mapping:
      binary: staging-linux-binary
    params:
      GCP_INSTANCE_NAME: ((toolsmiths/((vault-acceptance-prefix)).opsman-instance-name))
      GCP_PROJECT_ID: ((toolsmiths/((vault-acceptance-prefix)).gcp-project-id))
      GCP_SERVICE_ACCOUNT_KEY: ((service-accounts/gcp.ci-759-gcp-service-account-key))
      GCP_ZONE: ((toolsmiths/((vault-acceptance-prefix)).gcp-zone))
      OPS_MANAGER_PASSWORD: ((toolsmiths/((vault-acceptance-prefix)).opsman-password))
      OPS_MANAGER_URL: ((toolsmiths/((vault-acceptance-prefix)).ops-manager-url))
      OPS_MANAGER_USERNAME: ((toolsmiths/((vault-acceptance-prefix)).opsman-username))

- name: test-collect-and-send
  plan:
  - in_parallel:
    - get: version
      passed: [build-staging-binaries]
    - get: collection-timer
      trigger: true
    - get: aqueduct-courier
      passed: [build-staging-binaries]
      trigger: true
    - get: staging-linux-binary
      passed: [build-staging-binaries]
    - get: platform-automation-image
      params:
        unpack: true
        globs: ["*.tgz"]
    - get: ci
  - task: collect-with-opsmanager-user-creds
    file: ci/ci/tasks/collect.yml
    image: platform-automation-image
    input_mapping:
      binary: staging-linux-binary
    params:
      CF_API_URL: ((toolsmiths/((vault-acceptance-prefix)).cf-api-url))
      ENV_TYPE: development
      FOUNDATION_NICKNAME: telemetry-staging
      INSECURE_SKIP_TLS_VERIFY: true
      OPS_MANAGER_PASSWORD: ((toolsmiths/((vault-acceptance-prefix)).opsman-password))
      OPS_MANAGER_URL: ((toolsmiths/((vault-acceptance-prefix)).ops-manager-url))
      OPS_MANAGER_USERNAME: ((toolsmiths/((vault-acceptance-prefix)).opsman-username))
      USAGE_SERVICE_URL: ((toolsmiths/((vault-acceptance-prefix)).usage-service-url))
      USAGE_SERVICE_CLIENT_ID: ((toolsmiths/((vault-acceptance-prefix)).usage-service-client-id))
      USAGE_SERVICE_CLIENT_SECRET: ((toolsmiths/((vault-acceptance-prefix)).telemetry-usage-service-password))
      USAGE_SERVICE_INSECURE_SKIP_TLS_VERIFY: true
  - task: collect-with-opsmanager-client-creds
    file: ci/ci/tasks/collect.yml
    image: platform-automation-image
    input_mapping:
      binary: staging-linux-binary
    output_mapping:
      collected-data: collected-data-with-client-creds
    params:
      CF_API_URL: ((toolsmiths/((vault-acceptance-prefix)).cf-api-url))
      ENV_TYPE: development
      FOUNDATION_NICKNAME: telemetry-staging
      INSECURE_SKIP_TLS_VERIFY: true
      OPS_MANAGER_URL: ((toolsmiths/((vault-acceptance-prefix)).ops-manager-url))
      OPS_MANAGER_CLIENT_ID: ((toolsmiths/((vault-acceptance-prefix)).opsman-client-id))
      OPS_MANAGER_CLIENT_SECRET: ((toolsmiths/((vault-acceptance-prefix)).opsman-uaa-client-secret))
      USAGE_SERVICE_URL: ((toolsmiths/((vault-acceptance-prefix)).usage-service-url))
      USAGE_SERVICE_CLIENT_ID: ((toolsmiths/((vault-acceptance-prefix)).usage-service-client-id))
      USAGE_SERVICE_CLIENT_SECRET: ((toolsmiths/((vault-acceptance-prefix)).telemetry-usage-service-password))
      USAGE_SERVICE_INSECURE_SKIP_TLS_VERIFY: true
  - task: send
    file: ci/ci/tasks/send.yml
    image: platform-automation-image
    input_mapping:
      binary: staging-linux-binary
    params:
      API_KEY: ((aqueduct-courier-repo.loader-api-key))

- name: build-production-binaries
  serial_groups: [version]
  plan:
  - in_parallel:
    - get: aqueduct-courier
      passed: [test-collect-and-send, test-collect-credhub-info]
    - get: version
      params: {bump: final}
      passed: [test-collect-and-send, test-collect-credhub-info]
    - get: ci
  - put: aqueduct-courier
    params:
      repository: aqueduct-courier
      tag: version/version
      only_tag: true
  - task: build-binaries
    file: ci/ci/tasks/build-binaries.yml
    params:
      DATA_LOADER_URL: ((aqueduct-courier-repo.production-data-loader-url))
      ENSURE_HTTPS: true
  - put: production-binaries
    params:
      file: binary-tar/aqueduct-cli-*.tgz
  - put: production-linux-binary
    params:
      file: binaries/*linux*
  - put: version
    params: {file: version/version}

- name: auto-patch
  serial_groups: [version]
  plan:
  - get: version
    passed: [build-production-binaries]
    params: {bump: patch, pre: build}
    trigger: true
  - put: version
    params: {file: version/version}

- name: test-collect-and-send-production
  plan:
  - in_parallel:
    - get: aqueduct-courier
      passed: [build-production-binaries]
      trigger: true
    - get: production-binaries
      passed: [build-production-binaries]
    - get: production-linux-binary
      passed: [build-production-binaries]
    - get: platform-automation-image
      params:
        unpack: true
        globs: ["*.tgz"]
    - get: ci
  - task: collect-with-opsmanager-user-creds
    image: platform-automation-image
    input_mapping:
      binary: production-linux-binary
    file: ci/ci/tasks/collect.yml
    params:
      CF_API_URL: ((toolsmiths/((vault-production-prefix)).cf-api-url))
      ENV_TYPE: development
      FOUNDATION_NICKNAME: telemetry-production
      INSECURE_SKIP_TLS_VERIFY: true
      OPS_MANAGER_URL: ((toolsmiths/((vault-production-prefix)).ops-manager-url))
      OPS_MANAGER_USERNAME: ((toolsmiths/((vault-production-prefix)).opsman-username))
      OPS_MANAGER_PASSWORD: ((toolsmiths/((vault-production-prefix)).opsman-password))
      USAGE_SERVICE_URL: ((toolsmiths/((vault-production-prefix)).usage-service-url))
      USAGE_SERVICE_CLIENT_ID: ((toolsmiths/((vault-production-prefix)).usage-service-client-id))
      USAGE_SERVICE_CLIENT_SECRET: ((toolsmiths/((vault-production-prefix)).telemetry-usage-service-password))
      USAGE_SERVICE_INSECURE_SKIP_TLS_VERIFY: true
  - task: send
    image: platform-automation-image
    input_mapping:
      binary: production-linux-binary
    file: ci/ci/tasks/send.yml
    params:
      API_KEY: ((aqueduct-courier-repo.production-loader-api-key))

- name: release-to-pivnet
  plan:
  - in_parallel:
    - get: aqueduct-courier
      passed: [test-collect-and-send-production]
      trigger: true
    - get: production-binaries
      passed: [test-collect-and-send-production]
    - get: version
      passed: [build-production-binaries]
    - get: ci
  - task: prepare-release-files
    file: ci/ci/tasks/prep-release-files.yml
    input_mapping:
      binaries-tar: production-binaries
  - task: write-metadata
    file: ci/ci/tasks/write-metadata.yml
  - put: pivotal-telemetry-collector
    params:
      file_glob: release-files/telemetry-collector-*.tgz
      metadata_file: metadata/metadata

- name: major
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: major, pre: build}
  - put: version
    params: {file: version/version}

- name: minor
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: minor, pre: build}
  - put: version
    params: {file: version/version}

- name: patch
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: patch, pre: build}
  - put: version
    params: {file: version/version}

- name: ensure-production-sends
  plan:
  - in_parallel:
    - get: binary
      resource: pivotal-telemetry-collector
      params:
        unpack: true
        globs: ["*.tgz"]
    - get: tasks
      resource: pivotal-telemetry-collector
      params:
        unpack: true
        globs: ["*.tgz"]
    - get: prod-collection-timer
      trigger: true
    - get: aqueduct-courier
    - get: platform-automation-image
      params:
        unpack: true
        globs: ["*.tgz"]
    - get: ci
  - task: collect
    image: platform-automation-image
    file: ci/ci/tasks/collect.yml
    params:
      CF_API_URL: ((toolsmiths/((vault-production-prefix)).cf-api-url))
      ENV_TYPE: development
      FOUNDATION_NICKNAME: telemetry-production
      INSECURE_SKIP_TLS_VERIFY: true
      OPS_MANAGER_PASSWORD: ((toolsmiths/((vault-production-prefix)).opsman-password))
      OPS_MANAGER_USERNAME: ((toolsmiths/((vault-production-prefix)).opsman-username))
      OPS_MANAGER_URL: ((toolsmiths/((vault-production-prefix)).ops-manager-url))
      USAGE_SERVICE_CLIENT_ID: ((toolsmiths/((vault-production-prefix)).usage-service-client-id))
      USAGE_SERVICE_CLIENT_SECRET: ((toolsmiths/((vault-production-prefix)).telemetry-usage-service-password))
      USAGE_SERVICE_INSECURE_SKIP_TLS_VERIFY: true
      USAGE_SERVICE_URL: ((toolsmiths/((vault-production-prefix)).usage-service-url))
  - task: send
    image: platform-automation-image
    file: tasks/send.yml
    params:
      API_KEY: ((aqueduct-courier-repo.production-loader-api-key))
    on_failure:
      put: prod-slack-notification
      params:
        text: |
          Failed to send OpsManager dataset to production. Build: https://runway-ci.eng.vmware.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
