#!/usr/bin/env bash

# Check that a shepherd description is passed
# Note: description matches are fuzzy
if [ "$#" -ne 1 ]; then
	echo "You must pass in a shepherd environment description"
	exit 1
fi

# Check the output of the shepherd login command directly
if ! shepherd login user --json | jq -e '.login.User == "success"' &>/dev/null; then
	echo "Failed to login to shepherd" >&2
	exit 1
fi

ENV_DESCRIPTION_FUZZY=$1

# Check that you own passed in environment
ENV_MATCHES=$(shepherd list lease --desc-search "$ENV_DESCRIPTION_FUZZY" --json)

# Check for no matches / multiple matches
array_length=$(jq '. | length' <<<"$ENV_MATCHES")
if [ "$array_length" -eq 0 ]; then
	echo "No envs found."
	exit 1
elif [ "$array_length" -gt 1 ]; then
	echo "Multiple envs found. Be more specific."
	exit 1
fi

ENV_IDENTIFIER=$(shepherd list lease --desc-search "$ENV_DESCRIPTION_FUZZY" --json | jq -r '.[0].identifier')
ENV_DESCRIPTION=$(shepherd list lease --desc-search "$ENV_DESCRIPTION_FUZZY" --json | jq -r '.[0].description')
LOCKFILE=/Users/driddle/workspace/shepherd_envs/$ENV_DESCRIPTION-metadata.json
ENV_TYPE=$(echo "$ENV_DESCRIPTION" | cut -d '-' -f 1)
ENV_STEMCELL=$(echo "$ENV_DESCRIPTION" | cut -d '-' -f 2)

# Print env identifier
echo -e "\n********** ENVIRONMENT VARIABLES **********"
echo -e "\nIDENTIFIER:\t\t\t\t${ENV_IDENTIFIER}"
echo -e "DESCRIPTION:\t\t\t\t${ENV_DESCRIPTION}"

# Write environment json to file system
shepherd get lease "$ENV_IDENTIFIER" --json | jq -r .output >"$LOCKFILE"

# Source envs
eval "$(smith om --lockfile="$LOCKFILE")"

smith cf-login --lockfile="$LOCKFILE"
#smith open --lockfile="$LOCKFILE"

# If this is acceptance-jammy, write the lockfile to a secret
if [[ "$ENV_DESCRIPTION" == "acceptance-jammy" ]]; then
	vault kv put runway_concourse/tanzu-portfolio-insights/toolsmiths/acceptance-lockfile @/Users/driddle/workspace/shepherd_envs/acceptance-jammy-metadata.json
fi

# Make directories for data output
# mkdir -p ${PWD}/smith-data/$ENV_DESCRIPTION
# mkdir -p ${PWD}/smith-data/$ENV_DESCRIPTION/username-password
# mkdir -p ${PWD}/smith-data/$ENV_DESCRIPTION/client-id-client-secret

# Function to get ops_manager password
fetch_ops_manager_pw() {
	OPS_MANAGER_PASSWORD=$(smith read --lockfile="$LOCKFILE" | jq -r .ops_manager.password)
	echo -e "OPS_MANAGER_PASSWORD:\t\t\t$OPS_MANAGER_PASSWORD"
}

# Function to get ops_manager username
fetch_ops_manager_username() {
	OPS_MANAGER_USERNAME=$(smith read --lockfile="$LOCKFILE" | jq -r .ops_manager.username)
	echo -e "OPS_MANAGER_USERNAME:\t\t\t$OPS_MANAGER_USERNAME"
}

# Function to get ops_manager url
fetch_ops_manager_url() {
	OPS_MANAGER_URL=$(smith read --lockfile="$LOCKFILE" | jq -r .ops_manager.url)
	echo -e "OPS_MANAGER_URL:\t\t\t$OPS_MANAGER_URL"
}

# Function to get p_bosh_id
fetch_p_bosh_id() {
	P_BOSH_ID=$(smith om --lockfile="$LOCKFILE" -- curl -s --path=/api/v0/deployed/products | jq -r ".[].guid" | grep bosh)
	echo -e "P_BOSH_ID:\t\t\t\t$P_BOSH_ID"
}

# Function to get Telemetry Tile guid
fetch_telemetry_tile_guid() {
	if [[ $ENV_TYPE != "staging" ]]; then
		TELEMETRY_TILE_GUID=$(smith om --lockfile="$LOCKFILE" -- curl -s --path /api/v0/deployed/products | jq -r '.[] | select(.type == "pivotal-telemetry-om").guid')
		echo -e "TELEMETRY_TILE_GUID:\t\t\t$TELEMETRY_TILE_GUID"
	fi
}

# Function to get uaa_client_secret
fetch_uaa_client_secret() {
	if [[ $ENV_TYPE != "staging" ]]; then
		UAA_CLIENT_SECRET=$(smith om --lockfile="$LOCKFILE" -- curl -s --path /api/v0/deployed/products/"${TELEMETRY_TILE_GUID}"/manifest | jq -r '.instance_groups[] | select(.name == "telemetry-centralizer").jobs[] | select(.name == "telemetry-collector").properties.opsmanager.auth.uaa_client_secret')
		echo -e "UAA_CLIENT_SECRET:\t\t\t$UAA_CLIENT_SECRET"
	fi
}

# Function to get cf_guid
fetch_cf_guid() {
	CF_GUID=$(smith om --lockfile="$LOCKFILE" -- curl -s --path /api/v0/deployed/products | jq -r '.[] | select(.type == "cf").guid')
	if [ -n "$CF_GUID" ]; then
		echo -e "CF_GUID:\t\t\t\t$CF_GUID"
	else
		echo -e "CF_GUID:"
	fi
}

# Function to get GPC project id
fetch_gcp_project_id() {
	#GCP_PROJECT_ID=$(smith om --lockfile=$LOCKFILE -- curl -s --path /api/v0/staged/director/iaas_configurations | jq -r '.iaas_configurations[0].project')
	GCP_PROJECT_ID=$(smith read --lockfile="$LOCKFILE" | jq -r .project)
	echo -e "GCP_PROJECT_ID:\t\t\t\t$GCP_PROJECT_ID"
}

# Function to make an API call using the cf_guid and print the telemetry_usage_service_password
fetch_telemetry_usage_service_password() {
	TELEMETRY_USAGE_SERVICE_PASSWORD=""
	if [ -n "$CF_GUID" ]; then
		TELEMETRY_USAGE_SERVICE_PASSWORD=$(smith om --lockfile="$LOCKFILE" -- curl -s --path /api/v0/deployed/products/"${CF_GUID}"/credentials/.uaa.usage_service_client_credentials | jq -r .credential.value.password)
		echo -e "TELEMETRY_USAGE_SERVICE_PASSWORD:\t$TELEMETRY_USAGE_SERVICE_PASSWORD"
	else
		echo -e "TELEMETRY_USAGE_SERVICE_PASSWORD:"
	fi
}

# Function to get name
fetch_name() {
	NAME=$(smith read --lockfile="$LOCKFILE" | jq -r .name)
	echo -e "NAME:\t\t\t\t\t$NAME"
}

# Function to update values in Vault
update_vault() {
	# Login to Vault
	#vault login -method=ldap

	# Set path
	VAULT_PATH="${ENV_DESCRIPTION}"
	if [[ $ENV_STEMCELL == "jammy" ]]; then
		VAULT_PATH="${ENV_TYPE}"
	fi

	# Do the updating
	if [[ $ENV_TYPE == "staging" ]]; then
		vault kv put runway_concourse/tanzu-portfolio-insights/toolsmiths/"${VAULT_PATH}" \
			env-name="${NAME}" \
			p-bosh-id-guid="${P_BOSH_ID}"
		echo "Updated 2 Vault variables for ${ENV_DESCRIPTION}"
	else
		vault kv put runway_concourse/tanzu-portfolio-insights/toolsmiths/"${VAULT_PATH}" \
			cf-api-url="https://api.sys.${NAME}.cf-app.com" \
			env-name="${NAME}" \
			gcp-project-id="${GCP_PROJECT_ID}" \
			gcp-zone="us-central1-f" \
			iaas_type="google" \
			ops-manager-hostname="pcf.${NAME}.cf-app.com" \
			ops-manager-url="${OPS_MANAGER_URL}" \
			opsman-client-id="restricted_view_api_access" \
			opsman-instance-name="${NAME}-ops-manager" \
			opsman-password="${OPS_MANAGER_PASSWORD}" \
			opsman-uaa-client-secret="${UAA_CLIENT_SECRET}" \
			opsman-username="${OPS_MANAGER_USERNAME}" \
			p-bosh-id-guid="${P_BOSH_ID}" \
			telemetry-tile-guid="${TELEMETRY_TILE_GUID}" \
			telemetry-usage-service-password="${TELEMETRY_USAGE_SERVICE_PASSWORD}" \
			usage-service-client-id="usage_service" \
			usage-service-url="https://app-usage.sys.${NAME}.cf-app.com"

		echo "Updated 17 Vault variables for ${ENV_DESCRIPTION}"
	fi
}

# Main script execution starts here
fetch_ops_manager_pw
fetch_ops_manager_username
fetch_ops_manager_url
fetch_p_bosh_id
fetch_telemetry_tile_guid
fetch_uaa_client_secret
fetch_cf_guid
fetch_telemetry_usage_service_password
fetch_gcp_project_id
fetch_name

update_vault

exit 0

echo -e "\n\n********** CLI COMMANDS: USERNAME / PASSWORD **********"

# CLI STRINGS
echo -e "\n** CEIP ONLY **"
mkdir -p ${PWD}/smith-data/$ENV_DESCRIPTION/username-password/ceip
echo "telemetry-collector collect \\
    --url ${OPS_MANAGER_URL} \\
    --username pivotalcf \\
    --password ${OPS_MANAGER_PASSWORD} \\
    --env-type development \\
    --output-dir ${PWD}/smith-data/${ENV_DESCRIPTION}/username-password/ceip"

if [ -n "$TELEMETRY_USAGE_SERVICE_PASSWORD" ]; then
	echo -e "\n\n** OPERATIONAL DATA ONLY - WITH USAGE **"
	mkdir -p ${PWD}/smith-data/$ENV_DESCRIPTION/username-password/operational-data-only-with-usage
	echo -e "telemetry-collector collect \\
    --url ${OPS_MANAGER_URL} \\
    --username pivotalcf \\
    --password ${OPS_MANAGER_PASSWORD} \\
    --usage-service-url https://app-usage.sys.${ENV_DESCRIPTION}.cf-app.com \\
    --usage-service-client-id usage_service \\
    --usage-service-client-secret ${TELEMETRY_USAGE_SERVICE_PASSWORD} \\
    --cf-api-url https://api.sys.${ENV_DESCRIPTION}.cf-app.com \
    --env-type development \\
    --output-dir ${PWD}/smith-data/${ENV_DESCRIPTION}/username-password/operational-data-only-with-usage \\
    --operational-data-only"
fi

echo -e "\n\n** OPERATIONAL DATA ONLY - NO USAGE **"
mkdir -p ${PWD}/smith-data/$ENV_DESCRIPTION/username-password/operational-data-only-no-usage
echo "telemetry-collector collect \\
    --url ${OPS_MANAGER_URL} \\
    --username pivotalcf \\
    --password ${OPS_MANAGER_PASSWORD} \\
    --env-type development \\
    --output-dir ${PWD}/smith-data/${ENV_DESCRIPTION}/username-password/operational-data-only-no-usage \\
    --operational-data-only"

if [ -n "$TELEMETRY_USAGE_SERVICE_PASSWORD" ]; then
	echo -e "\n\n** ALL **"
	mkdir -p ${PWD}/smith-data/$ENV_DESCRIPTION/username-password/all
	echo "telemetry-collector collect \\
    --url ${OPS_MANAGER_URL} \\
    --username pivotalcf \\
    --password ${OPS_MANAGER_PASSWORD} \\
    --usage-service-url https://app-usage.sys.${ENV_DESCRIPTION}.cf-app.com \\
    --usage-service-client-id usage_service \\
    --usage-service-client-secret ${TELEMETRY_USAGE_SERVICE_PASSWORD} \\
    --cf-api-url https://api.sys.${ENV_DESCRIPTION}.cf-app.com \\
    --env-type development \\
    --output-dir ${PWD}/smith-data/${ENV_DESCRIPTION}/username-password/all"
fi

echo -e "\n\n********** CLI COMMANDS: CLIENT ID / CLIENT SECRET **********"

# CLIENT ID / CLIENT SECRET
echo -e "\n** CEIP ONLY **"
mkdir -p ${PWD}/smith-data/$ENV_DESCRIPTION/client-id-client-secret/ceip
echo "telemetry-collector collect \\
    --url ${OPS_MANAGER_URL} \\
    --client-id restricted_view_api_access \\
    --client-secret ${UAA_CLIENT_SECRET} \\
    --env-type development \\
    --output-dir ${PWD}/smith-data/${ENV_DESCRIPTION}/client-id-client-secret/ceip"

if [ -n "$TELEMETRY_USAGE_SERVICE_PASSWORD" ]; then
	echo -e "\n\n** OPERATIONAL DATA ONLY - WITH USAGE **"
	mkdir -p ${PWD}/smith-data/$ENV_DESCRIPTION/client-id-client-secret/operational-data-only-with-usage
	echo -e "telemetry-collector collect \\
    --url ${OPS_MANAGER_URL} \\
    --client-id restricted_view_api_access \\
    --client-secret ${UAA_CLIENT_SECRET} \\
    --usage-service-url https://app-usage.sys.${ENV_DESCRIPTION}.cf-app.com \\
    --usage-service-client-id usage_service \\
    --usage-service-client-secret ${TELEMETRY_USAGE_SERVICE_PASSWORD} \\
    --cf-api-url https://api.sys.${ENV_DESCRIPTION}.cf-app.com \
    --env-type development \\
    --output-dir ${PWD}/smith-data/${ENV_DESCRIPTION}/client-id-client-secret/operational-data-only-with-usage \\
    --operational-data-only"
fi

echo -e "\n\n** OPERATIONAL DATA ONLY - NO USAGE **"
mkdir -p ${PWD}/smith-data/$ENV_DESCRIPTION/client-id-client-secret/operational-data-only-no-usage
echo "telemetry-collector collect \\
    --url ${OPS_MANAGER_URL} \\
    --username pivotalcf \\
    --password ${OPS_MANAGER_PASSWORD} \\
    --env-type development \\
    --output-dir ${PWD}/smith-data/${ENV_DESCRIPTION}/client-id-client-secret/operational-data-only-no-usage \\
    --operational-data-only"

if [ -n "$TELEMETRY_USAGE_SERVICE_PASSWORD" ]; then
	echo -e "\n\n** ALL **"
	mkdir -p ${PWD}/smith-data/$ENV_DESCRIPTION/client-id-client-secret/all
	echo -e "telemetry-collector collect \\
    --url ${OPS_MANAGER_URL} \\
    --client-id restricted_view_api_access \\
    --client-secret ${UAA_CLIENT_SECRET} \\
    --usage-service-url https://app-usage.sys.${ENV_DESCRIPTION}.cf-app.com \\
    --usage-service-client-id usage_service \\
    --usage-service-client-secret ${TELEMETRY_USAGE_SERVICE_PASSWORD} \\
    --cf-api-url https://api.sys.${ENV_DESCRIPTION}.cf-app.com \\
    --env-type development \\
    --output-dir ${PWD}/smith-data/${ENV_DESCRIPTION}/all"
fi

echo -e "\n"
