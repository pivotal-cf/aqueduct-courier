// Code generated by counterfeiter. DO NOT EDIT.
package coreconsumptionfakes

import (
	"io"
	"sync"

	"github.com/pivotal-cf/aqueduct-courier/coreconsumption"
)

type FakeOmService struct {
	CoreCountsStub        func() (io.Reader, error)
	coreCountsMutex       sync.RWMutex
	coreCountsArgsForCall []struct {
	}
	coreCountsReturns struct {
		result1 io.Reader
		result2 error
	}
	coreCountsReturnsOnCall map[int]struct {
		result1 io.Reader
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOmService) CoreCounts() (io.Reader, error) {
	fake.coreCountsMutex.Lock()
	ret, specificReturn := fake.coreCountsReturnsOnCall[len(fake.coreCountsArgsForCall)]
	fake.coreCountsArgsForCall = append(fake.coreCountsArgsForCall, struct {
	}{})
	stub := fake.CoreCountsStub
	fakeReturns := fake.coreCountsReturns
	fake.recordInvocation("CoreCounts", []interface{}{})
	fake.coreCountsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOmService) CoreCountsCallCount() int {
	fake.coreCountsMutex.RLock()
	defer fake.coreCountsMutex.RUnlock()
	return len(fake.coreCountsArgsForCall)
}

func (fake *FakeOmService) CoreCountsCalls(stub func() (io.Reader, error)) {
	fake.coreCountsMutex.Lock()
	defer fake.coreCountsMutex.Unlock()
	fake.CoreCountsStub = stub
}

func (fake *FakeOmService) CoreCountsReturns(result1 io.Reader, result2 error) {
	fake.coreCountsMutex.Lock()
	defer fake.coreCountsMutex.Unlock()
	fake.CoreCountsStub = nil
	fake.coreCountsReturns = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeOmService) CoreCountsReturnsOnCall(i int, result1 io.Reader, result2 error) {
	fake.coreCountsMutex.Lock()
	defer fake.coreCountsMutex.Unlock()
	fake.CoreCountsStub = nil
	if fake.coreCountsReturnsOnCall == nil {
		fake.coreCountsReturnsOnCall = make(map[int]struct {
			result1 io.Reader
			result2 error
		})
	}
	fake.coreCountsReturnsOnCall[i] = struct {
		result1 io.Reader
		result2 error
	}{result1, result2}
}

func (fake *FakeOmService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.coreCountsMutex.RLock()
	defer fake.coreCountsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOmService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ coreconsumption.OmService = new(FakeOmService)
